---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Values.name }}-app
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "labels.common" . | nindent 4 }}
    component: webhook
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      {{- include "labels.selector" . | nindent 6 }}
      component: webhook
  template:
    metadata:
      labels:
        {{- include "labels.common" . | nindent 8 }}
        component: webhook
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - {{ include "name" . | quote }}
              topologyKey: "kubernetes.io/hostname"
      serviceAccountName: {{ .Values.name }}
      securityContext:
        {{- with .Values.podSecurityContext }}
          {{- . | toYaml | nindent 8 }}
        {{- end }}
      containers:
        - name: pod-identity-webhook
          {{- if eq .Values.provider "capa" }}
          image: "{{ .Values.image.registry }}/{{ .Values.gsImage.name }}:{{ .Values.gsImage.tag }}"
          {{- else }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /webhook
            - --in-cluster=false
            - --namespace={{ .Values.namespace }}
            - --service-name={{ .Values.name }}
            - --annotation-prefix={{ .Values.annotationPrefix }}
            - --token-audience={{ .Values.aws.tokenAudience }}
            - --port={{ .Values.ports.webhook }}
            - --metrics-port={{ .Values.ports.metrics }}
            - --logtostderr
            - --tls-secret={{ .Values.name }}
            - --sts-regional-endpoint
            {{- if eq .Values.provider "capa" }}
            - --compose-role-arn
            {{- end }}
          ports:
            - name: web
              protocol: TCP
              containerPort: {{ .Values.ports.webhook }}
            - name: metrics
              protocol: TCP
              containerPort: {{ .Values.ports.metrics }}
          securityContext:
            {{- with .Values.securityContext }}
              {{- . | toYaml | nindent 12 }}
            {{- end }}
          resources:
          {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: cert
              mountPath: "/etc/webhook/certs"
              readOnly: true
      volumes:
        - name: cert
          secret:
            secretName: {{ .Values.name }}
---
